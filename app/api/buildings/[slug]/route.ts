import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

// üöÄ Mise √† jour du nom du b√¢timent (PATCH)
export async function PATCH(request: Request, context: { params: { slug?: string } }) {
  try {
    const { slug } = await context.params; // ‚úÖ Attendre params

    if (!slug) {
      return NextResponse.json({ error: "Slug du b√¢timent requis" }, { status: 400 });
    }

    const { name } = await request.json();

    if (!name) {
      return NextResponse.json({ error: "Le nom est requis" }, { status: 400 });
    }

    const updatedBuilding = await prisma.building.update({
      where: { slug },
      data: { name },
    });

    return NextResponse.json(updatedBuilding);
  } catch (error) {
    console.error("Erreur de mise √† jour du b√¢timent :", error);
    return NextResponse.json({ error: "Erreur lors de la mise √† jour" }, { status: 500 });
  }
}

// üöÄ R√©cup√©ration d'un b√¢timent (GET)
export async function GET(request: Request, context: { params: { slug?: string } }) {
  try {
    const slug = context.params?.slug; // ‚úÖ Attendre params.slug correctement

    if (!slug) {
      return NextResponse.json({ error: "Slug du b√¢timent non fourni." }, { status: 400 });
    }

    const building = await prisma.building.findUnique({
      where: { slug },
      include: {
        _count: { select: { apartments: true } }, // Compter les logements
      },
    });

    if (!building) {
      return NextResponse.json({ error: "B√¢timent introuvable." }, { status: 404 });
    }

    return NextResponse.json(building);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du b√¢timent :", error);
    return NextResponse.json({ error: "Impossible de r√©cup√©rer le b√¢timent." }, { status: 500 });
  }
}

// üöÄ Suppression d'un b√¢timent (DELETE)
export async function DELETE(request: Request, context: { params: { slug?: string } }) {
  try {
    const slug = context.params?.slug; // ‚úÖ Attendre params.slug correctement

    if (!slug) {
      return NextResponse.json({ error: "Slug du b√¢timent non fourni." }, { status: 400 });
    }

    // V√©rifier si le b√¢timent existe
    const building = await prisma.building.findUnique({
      where: { slug },
      include: { apartments: true },
    });

    if (!building) {
      return NextResponse.json({ error: "B√¢timent introuvable." }, { status: 404 });
    }

    // V√©rifier s'il y a des logements associ√©s
    if (building.apartments.length > 0) {
      return NextResponse.json(
        { error: "Vous devez d'abord supprimer tous les logements associ√©s." },
        { status: 400 }
      );
    }

    // Supprimer le b√¢timent
    await prisma.building.delete({ where: { slug } });

    return NextResponse.json({ message: "B√¢timent supprim√© avec succ√®s." });
  } catch (error) {
    console.error("Erreur lors de la suppression du b√¢timent :", error);
    return NextResponse.json({ error: "Impossible de supprimer le b√¢timent." }, { status: 500 });
  }
}
